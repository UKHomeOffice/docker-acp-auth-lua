# default location block; will authenticate user and set headers based on the user's information from the userinfo endpoint and the access token
location / {
  access_by_lua_block {
    -- authenticate user
    local response = require('authenticate').authenticate_user()

    -- convert the access token back into a table
    local jwt = require "resty.jwt"
    local token = jwt:load_jwt(response.access_token).payload

    -- check for the roles and groups in the access token because table.concat does not work with nil values
    -- so we at least need it to be an empty table
    local roles_claim = os.getenv("KEYCLOAK_CLAIM_ROLES")
    local groups_claim = os.getenv("KEYCLOAK_CLAIM_GROUPS")

    -- check if the roles are in the token
    -- if the user provided a custom roles claim, and it isn't empty then we'll use it, otherwise we use a default claim 
    local user_roles = {}
    if roles_claim ~= "" then
      user_roles = (token[roles_claim] == nil and {} or token[roles_claim])
    else
      user_roles = (token.realm_access.roles == nil and {} or token.realm_access.roles)
    end

    -- check if the groups are in the token
    -- if the user provided a group claim, and it isn't empty then we'll use it
    -- we don't use a default claim like we do for roles because by default groups aren't in Keycloak's access tokens
    local user_groups = {}
    if groups_claim ~= "" then
      user_groups = (token[groups_claim] ~= nil and token[groups_claim] or {})
    end

    -- set request headers
    ngx.req.set_header("X-Auth-Audience", token.aud)
    ngx.req.set_header("X-Auth-Email", response.user.email)
    ngx.req.set_header("X-Auth-ExpiresIn", token.exp)
    ngx.req.set_header("X-Auth-Groups", table.concat(user_groups,","))
    ngx.req.set_header("X-Auth-Roles", table.concat(user_roles,","))
    ngx.req.set_header("X-Auth-Subject", response.user.sub)
    ngx.req.set_header("X-Auth-Userid", response.user.preferred_username)
    ngx.req.set_header("X-Auth-Username", response.user.preferred_username)

    -- set x-auth-token header
    if os.getenv("SET_TOKEN_HEADER") == "true" then
      ngx.req.set_header("X-Auth-Token", response.access_token)
    end

    -- set authorization bearer header
    if os.getenv("SET_AUTH_HEADER") == "true" then
      ngx.req.set_header("Authorization", "Bearer " .. response.access_token)
    end
  }

  proxy_pass $proxy_upstream;
}

# default location block; will authenticate user and set headers based on the user's information
location / {
  access_by_lua_block {
    -- authenticate user
    local response = require('authenticate').authenticate_user()

    -- convert the access token back into a table
    local jwt = require "resty.jwt"
    local token = jwt:load_jwt(response.access_token).payload

    if token == nil then
      ngx.log(ngx.ERR, "token is empty...")
      ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
    end

    -- check if the groups are in the token
    if token[os.getenv("KEYCLOAK_CLAIM_GROUPS")] == nil then
      ngx.log(ngx.DEBUG, "no groups found, setting to empty table")
      token[os.getenv("KEYCLOAK_CLAIM_GROUPS")] = {}
    end

    -- check if the roles are in the token
    if token[os.getenv("KEYCLOAK_CLAIM_ROLES")] == nil then
      ngx.log(ngx.DEBUG, "no roles found, setting to empty table")
      token[os.getenv("KEYCLOAK_CLAIM_ROLES")] = {}
    end

    -- set request headers
    ngx.req.set_header("X-Auth-Audience", token.aud)
    ngx.req.set_header("X-Auth-Email", response.user.email)
    ngx.req.set_header("X-Auth-ExpiresIn", token.exp)
    ngx.req.set_header("X-Auth-Groups", table.concat(token[os.getenv("KEYCLOAK_CLAIM_GROUPS")],","))
    ngx.req.set_header("X-Auth-Roles", table.concat(token[os.getenv("KEYCLOAK_CLAIM_ROLES")],","))
    ngx.req.set_header("X-Auth-Subject", response.user.sub)
    ngx.req.set_header("X-Auth-Userid", response.user.preferred_username)
    ngx.req.set_header("X-Auth-Username", response.user.preferred_username)

    -- set x-auth-token header
    if os.getenv("SET_TOKEN_HEADER") then
      ngx.req.set_header("X-Auth-Token", response.access_token)
    end

    -- set authorization bearer header
    if os.getenv("SET_AUTH_HEADER") then
      ngx.req.set_header("Authorization", "Bearer " .. response.access_token)
    end
  }

  proxy_pass $proxy_upstream;
}

# default location block; will authenticate user and set headers based on the user's information
location / {
  access_by_lua_block {
    -- authenticate user
    local response = require('authenticate').authenticate_user()

    -- convert the access token back into a table
    local cjson = require "cjson"
    local jwt = require "resty.jwt"
    local jwt_object = jwt:load_jwt(response.access_token)
    local token = jwt_object.payload

    -- for testing
    if token == nil then
      ngx.log(ngx.ERR, "token is empty")
      ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
    -- else
    --   ngx.log(ngx.DEBUG, "token is not empty: " .. cjson.encode(token))
    end

    -- checking for roles and groups in token because table.concat does not work with a nil value
    -- so the value must be at least an empty table
    local roles_claim = os.getenv("KEYCLOAK_CLAIM_ROLES")
    local groups_claim = os.getenv("KEYCLOAK_CLAIM_GROUPS")

    -- check if the roles are in the token
    local user_roles = ""
    ngx.log(ngx.DEBUG, "getting roles from token")
    -- if the user provided a custom roles claim...
    if roles_claim ~= "" then
      -- ...then just use that (can't be nested)
      ngx.log(ngx.DEBUG, "using given roles claim")
      if token[roles_claim] == nil then
        ngx.log(ngx.DEBUG, "no roles found, header will be empty")
        user_roles = {}
      else
        ngx.log(ngx.DEBUG, "roles found in token")
        user_roles = token[roles_claim]
      end

      -- shortform version
      --user_roles = (token[roles_claim] == nil and {} or token[roles_claim])
    else
      -- otherwise use the hardcoded claim
      ngx.log(ngx.DEBUG, "no roles claim set, using hardcoded claim")
      if token.realm_access.roles == nil then
        ngx.log(ngx.DEBUG, "no roles found, header will be empty")
        user_roles = {}
      else
        ngx.log(ngx.DEBUG, "roles found in token")
        user_roles = token.realm_access.roles
      end

      -- shortform version
      --user_roles = (token.realm_access.roles == nil and {} or token.realm_access.roles)
    end

    -- check if the groups are in the token
    local user_groups = ""
    ngx.log(ngx.DEBUG, "getting groups from token")
    -- if the user provided a custom roles claim...
    if groups_claim ~= "" then
      -- ...then just use that (can't be nested)
      ngx.log(ngx.DEBUG, "using given groups claim")
      if token[groups_claim] == nil then
        ngx.log(ngx.DEBUG, "no groups found, header will be empty")
        user_groups = {}
      else
        ngx.log(ngx.DEBUG, "groups found in token")
        user_groups = token[groups_claim]
      end

      -- shortform version
      --user_groups = (token[groups_claim] == nil and {} or token[groups_claim])
    else
      -- otherwise set it to empty as groups aren't in access tokens by default
      ngx.log(ngx.DEBUG, "no groups claim set, setting header will be empty")
      user_groups = {}
    end

    -- set request headers
    ngx.req.set_header("X-Auth-Audience", token.aud)
    ngx.req.set_header("X-Auth-Email", response.user.email)
    ngx.req.set_header("X-Auth-ExpiresIn", token.exp)
    ngx.req.set_header("X-Auth-Groups", table.concat(user_groups,","))
    ngx.req.set_header("X-Auth-Roles", table.concat(user_roles,","))
    ngx.req.set_header("X-Auth-Subject", response.user.sub)
    ngx.req.set_header("X-Auth-Userid", response.user.preferred_username)
    ngx.req.set_header("X-Auth-Username", response.user.preferred_username)

    -- set x-auth-token header
    if os.getenv("SET_TOKEN_HEADER") == "true" then
      ngx.req.set_header("X-Auth-Token", response.access_token)
    end

    -- set authorization bearer header
    if os.getenv("SET_AUTH_HEADER") == "true" then
      ngx.req.set_header("Authorization", "Bearer " .. response.access_token)
    end
  }

  proxy_pass $proxy_upstream;
}

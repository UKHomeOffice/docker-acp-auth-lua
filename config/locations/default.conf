# default location block; will authenticate user and set headers based on the user's information
location / {
  access_by_lua_block {
    -- load lua functions
    -- need to set package path because the file isn't in one of the default locations that 'require' will look
    package.path = package.path .. ";/usr/local/openresty/nginx/conf/lua/?.lua"

    -- ...or you could use dofile instead with the full path (then you wouldn't need to update the package path), but require is preferred - https://stackoverflow.com/a/31149198
    -- local functions = dofile('/usr/local/openresty/nginx/conf/lua/authenticate.lua')

    -- authenticate user
    local response = require('authenticate').authenticate_user()

    -- set request headers
    -- note: this is being done as Keycloak Gatekeeper did the same thing
    -- untested
    ngx.req.set_header("X-Auth-Audience", response.access_token.aud)
    ngx.req.set_header("X-Auth-Email", response.user.email)
    ngx.req.set_header("X-Auth-ExpiresIn", response.access_token.exp)
    ngx.req.set_header("X-Auth-Groups", table.concat(response.access_token.groups,","))
    ngx.req.set_header("X-Auth-Roles", table.concat(response.access_token.realm_access.roles,","))
    ngx.req.set_header("X-Auth-Subject", response.user.sub)
    ngx.req.set_header("X-Auth-Userid", response.user.preferred_username)
    ngx.req.set_header("X-Auth-Username", response.user.preferred_username)

    -- set x-auth-token header
    if os.getenv("SET_TOKEN_HEADER") then
      ngx.req.set_header("X-Auth-Token", response.access_token)
    end

    -- set authorization bearer header
    if os.getenv("SET_AUTH_HEADER") then
      ngx.req.set_header("Authorization", "Bearer " .. response.access_token)
    end
  }

  proxy_pass $proxy_upstream;
}

# default config for the auth-proxy
# note: some of the varibles in the config will be replaced with real values in the entrypoint.sh script (see that script for more details)

# give nginx access to the env vars of this container
env CLIENT_AUTH_METHOD;
env CLIENT_ID;
env CLIENT_SECRET;
env DISCOVERY_URL;
env GROUPS_CLAIM;
env LOGOUT_PATH;
env REDIRECT_URL;
env REVOKE_TOKENS_ON_LOGOUT;
env ROLES_CLAIM;
env SCOPES;
env SESSION_SECRET;
env SET_AUTH_HEADER;
env SET_TOKEN_HEADER;
env SILENT_TOKEN_RENEWAL;
env UPSTREAM_URL;

worker_processes 1;

events {
  worker_connections 1024;
}

http {
  include       mime.types;
  default_type  application/octet-stream;

  # set default writable paths because of https://github.com/openresty/docker-openresty/issues/119
  client_body_temp_path /var/run/openresty/nginx-client-body;
  proxy_temp_path       /var/run/openresty/nginx-proxy;
  fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
  uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
  scgi_temp_path        /var/run/openresty/nginx-scgi;

  lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
  lua_ssl_verify_depth 5;

  # define json log format (if used, only affects the access log)
  log_format combined_json escape=json '{'
    '"timestamp": "$time_iso8601", '
    '"remote_addr": "$remote_addr", '
    '"body_bytes_sent": $body_bytes_sent, '
    '"request_time": $request_time, '
    '"response_status": $status, '
    '"request": "$request", '
    '"request_method": "$request_method", '
    '"host": "$host",'
    '"upstream_addr": "$upstream_addr",'
    '"http_x_forwarded_for": "$http_x_forwarded_for",'
    '"http_referrer": "$http_referer", '
    '"http_user_agent": "$http_user_agent", '
    '"http_version": "$server_protocol" '
  '}';

  # any modules/functions in this path can be using in a lua directive (note: the ;; appends the default lua package path to this)
  lua_package_path "/usr/local/openresty/nginx/conf/lua/?.lua;;";

  # do not show the openresty version
  server_tokens off;

  # to add something to the http context, add a new ".conf" file to the "httpconf" directory
  include httpconf/*.conf;

  server {
    # the upstream application
    set_by_lua_block $proxy_upstream { return os.getenv("UPSTREAM_URL") }

    # this is needed for when you run multiple instances of this
    # without it, each container will generate its own session secret which leads to a "no session state found" error if a user happens to be sent to a different container while authenticating
    set_by_lua_block $session_secret { return os.getenv("SESSION_SECRET") }

    set $session_cookie_samesite None;

    server_name _;

    listen $http_listen_port;

    # tls settings
    listen $https_listen_port ssl;
    ssl_certificate $tls_cert;
    ssl_certificate_key $tls_private_key;

    large_client_header_buffers 4 32k;
    client_header_buffer_size 4k;

    # log all requests and errors to stdout
    access_log /dev/stdout $log_type;
    error_log /dev/stdout $log_level;

    # define what DNS resolver to use to resolve the upstream application's endpoint (this is needed as the locations we're using variables in the proxy_pass directive)
    resolver $resolver;

    # to add a new location block, add a new ".conf" file to the "locations" directory
    include locations/*.conf;
  }
}
